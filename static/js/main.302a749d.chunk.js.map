{"version":3,"sources":["components/Loading.js","helpers.js","components/list/Card.js","components/list/List.js","components/Search.js","components/notFound/NotFound.js","components/detail/Detail.js","App.js","serviceWorker.js","index.js"],"names":["Loading","props","width","height","react_default","a","createElement","className","style","defaultProps","handleResponse","response","json","then","ok","Promise","reject","Card","details","this","fullDate","dt_txt","split","splice","date","concat","fullTime","join","celsiusTemp","Math","floor","main","temp","src","weather","icon","alt","description","wind","speed","pressure","humidity","React","Component","withRouter","List","_this$props","loading","error","dates","location","src_components_Loading","state","Object","keys","map","key","components_list_Card","index","Search","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","setState","target","value","fetchLocation","bind","assertThisInitialized","fetchWeather","_this2","fetch","method","data","city","catch","errorMessage","_this3","list","_this4","type","placeholder","onChange","onClick","components_list_List","NotFound","react_router_dom","to","Detail","App","basename","react_router","path","component","exact","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.302a749d.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Loading.css';\r\n\r\nconst Loading = (props) => {\r\n    const {width, height} = props;\r\n    return <div className=\"Loading\" style={{width, height}}></div>\r\n}\r\n\r\nLoading.defaultProps = {\r\n    width: '28px',\r\n    height: '28px',\r\n}\r\n\r\nLoading.propTypes = {\r\n    width: PropTypes.string,\r\n    height: PropTypes.string,\r\n};\r\n\r\nexport default Loading; ","import React from 'react';\r\n/**\r\n * Fetch error helper\r\n * \r\n * @param {object} response\r\n */\r\nexport const handleResponse = (response) => {\r\n    return response.json().then(json => {\r\n        return response.ok ? json : Promise.reject(json);\r\n    });\r\n}\r\n/**\r\n * Render change persent helper\r\n * \r\n * @param {string} percent\r\n */\r\nexport const renderChangePercent = (percent) => {\r\n    if (percent > 0) {\r\n        return <span className=\"percent-raised\">{percent}% &uarr;</span>\r\n    } else if (percent < 0) {\r\n        return <span className=\"percent-fallen\">{percent}% &darr;</span>\r\n    } else {\r\n        return <span>{percent}</span>\r\n    }\r\n}","import React from 'react';\r\nimport {withRouter} from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport './Card.css';\r\n\r\nclass Card extends React.Component {\r\n    render(){\r\n        const { details } = this.props;\r\n        // delete year\r\n        const fullDate = details.dt_txt.split(' ')[0].split('-').splice(1, 2);\r\n        // change places of date and month\r\n        const date = fullDate[1].concat('.'+fullDate[0]);\r\n        // remove seconds counter\r\n        const fullTime = details.dt_txt.split(' ')[1].split(':', 2).join(':');\r\n        // convert kelvin to celsius\r\n        const celsiusTemp = Math.floor(details.main.temp - 273.15);\r\n\r\n        return (\r\n            <div className=\"cardItem\">\r\n                <h3 className=\"heading\">\r\n                    Дата: {date} {fullTime}\r\n                </h3>\r\n                <div className=\"iconPack\">\r\n                    <img src={`http://openweathermap.org/img/w/${details.weather[0].icon}.png`} alt={details.weather[0].description}/>\r\n                    <span className=\"iconcaption\">\r\n                        {details.weather[0].description}\r\n                    </span>\r\n                </div>\r\n                <span className=\"wind\">\r\n                    Ветер: {details.wind.speed} м/с\r\n                </span>\r\n                <span className=\"temper\">\r\n                    Температура: {celsiusTemp} С\r\n                </span>\r\n                <span className=\"pressure\">\r\n                    Давление: {details.main.pressure} мм.рт.ст.\r\n                </span>\r\n                <span className=\"humidity\">\r\n                    Влажность: {details.main.humidity} %\r\n                </span>\r\n\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nCard.propTypes = {\r\n    details: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default withRouter(Card);","import React from 'react';\r\nimport { handleResponse } from '../../helpers';\r\nimport { API_URL } from '../../config';\r\nimport Loading from '../Loading';\r\nimport Card from '../list/Card';\r\nimport responseExample from '../../responseExample.json';\r\nimport './List.css';\r\n\r\n\r\nclass List extends React.Component {\r\n    \r\n\r\n     render() {\r\n        const { loading, error, dates, location } = this.props;\r\n\r\n        // render only loading component, if loading state is set to true\r\n        if (loading) {\r\n            return <div className=\"loading-container\"><Loading/></div>\r\n        }\r\n        // render only error message, if error occured while fething data\r\n        if (error) {\r\n            return <div className=\"error\">{this.state.error}</div>\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                {/* <h1>Текущая погода в Вашем регионе </h1> */}\r\n                <h1>Текущая погода в Вашем регионе ({location})</h1>\r\n                <div className=\"blocksWrap\">\r\n                {\r\n                    //console.log(this.state.dates)\r\n                    Object\r\n                    .keys(dates)\r\n                    .map(key => <Card key={key} index={key} details={dates[key]}/>)\r\n                }\r\n                </div>\r\n                \r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default List;","import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport Loading from './Loading';\r\nimport List from './list/List';\r\nimport { handleResponse } from '../helpers';\r\nimport responseExample from '../responseExample.json'\r\nimport './Search.css';\r\n\r\nclass Search extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.fetchLocation = this.fetchLocation.bind(this);\r\n        this.fetchWeather = this.fetchWeather.bind(this);\r\n        this.state = {\r\n            loading: false,\r\n            dates: {},\r\n            error: null,\r\n            location: ''\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchLocation();\r\n        this.fetchWeather();\r\n    }\r\n\r\n    fetchLocation() {\r\n        this.setState({\r\n            loading: true\r\n        });\r\n        \r\n        fetch(\"https://api.ipgeolocation.io/ipgeo?apiKey=6701b29ea60a42e99eef5efd851ee3fb\", {\r\n            method: 'GET'\r\n        })\r\n        .then(handleResponse)\r\n        .then((data) => {\r\n            this.setState({\r\n                location: data.city\r\n            })\r\n        })\r\n        .catch((error) => {\r\n            this.setState({\r\n                error: error.errorMessage,\r\n                loading: false,\r\n            })\r\n        })\r\n        .then( this.fetchWeather() );\r\n        \r\n    };\r\n    fetchWeather(){\r\n        this.setState({\r\n            loading: true\r\n        });\r\n        \r\n        fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${this.state.location}&id=524901&APPID=e3d621ebafdefe30a9372f17e5fd10d7`, {\r\n            method: 'GET'\r\n        })\r\n        .then(handleResponse)\r\n        .then((data) => {\r\n            this.setState({\r\n                dates: data.list,\r\n                loading: false\r\n            })\r\n        })\r\n        .catch((error) => {\r\n            this.setState({\r\n                error: error.errorMessage,\r\n                loading: false,\r\n            })\r\n        });\r\n    };\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            location: e.target.value\r\n        })\r\n    }\r\n   \r\n   \r\n    render() {\r\n        return (\r\n            <div>\r\n                <form>\r\n                    <div className=\"Search\">\r\n                        <span className=\"Search-icon\"/>\r\n                        <div className=\"inputWrap\">\r\n                            <input\r\n                                className=\"Search-input\"\r\n                                type=\"text\"\r\n                                placeholder=\"Введите местоположение\"\r\n                                value={this.state.location}\r\n                                onChange={e => this.handleChange(e)}\r\n                            />\r\n                            <span className=\"bottom\"></span>\r\n                            <span className=\"right\"></span>\r\n                            <span className=\"top\"></span>\r\n                            <span className=\"left\"></span>\r\n                        </div>\r\n                        \r\n                            <div className=\"Search-loading\">\r\n                                <Loading\r\n                                    width='12px'\r\n                                    height='12px'\r\n                                />\r\n                            </div>\r\n                        \r\n                        {/* {this.renderSearchResult()} */}\r\n                    </div>\r\n                    <div className=\"searchButtons\">\r\n                        <button \r\n                            type=\"button\" \r\n                            className=\"button mylocation\"\r\n                            onClick={this.fetchLocation}\r\n                        >\r\n                            По моему местоположению\r\n                        </button>\r\n                        <button \r\n                            type=\"button\" \r\n                            className=\"button search\"\r\n                            onClick={this.fetchWeather}\r\n                        >\r\n                            Искать!\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n                <List\r\n                    loading={this.state.loading}\r\n                    dates={this.state.dates}\r\n                    error={this.state.error}\r\n                    location={this.state.location}\r\n                />\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(Search);","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport './NotFound.css';\r\n\r\nconst NotFound = () => {\r\n    return (\r\n        <div className=\"NotFound\">\r\n            <h1 className=\"NotFound-title\">Oops! Page not found!</h1>\r\n\r\n            <Link to=\"/\" className=\"NotFound-link\">Go to homepage</Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NotFound;","import React from 'react';\r\n// import { API_URL } from '../../config';\r\n// import Loading from '../common/Loading';\r\n// import { handleResponse, renderChangePercent } from '../../helpers';\r\n// import './Detail.css';\r\n\r\nclass Detail extends React.Component {\r\n//     constructor() {\r\n//         super();\r\n\r\n//         this.state = {\r\n//             days: {},\r\n//             loading: false,\r\n//             error: null,\r\n//         };\r\n\r\n//     }\r\n//     componentDidMount() {\r\n//         const currencyId = this.props.match.params.id;\r\n//         this.fetchCurrency(currencyId);\r\n//     }\r\n//     componentWillReceiveProps(nextProps) {\r\n//         if (this.props.location.pathname !== nextProps.location.pathname){\r\n//             //get new currency id from url\r\n//             const newCurrencyId = nextProps.match.params.id;\r\n//             this.fetchCurrency(newCurrencyId);\r\n//         }\r\n//     }\r\n\r\n//     fetchCurrency(currencyId) {\r\n//         this.setState({ \r\n//             loading: true,\r\n//         });\r\n\r\n//         fetch(`${API_URL}/cryptocurrencies/${currencyId}`)\r\n//             .then(handleResponse)\r\n//             .then((currency) => {\r\n//                 this.setState({ \r\n//                     loading: false,\r\n//                     error: null,\r\n//                     currency,\r\n//                 });\r\n//             })\r\n//             .catch((error) => {\r\n//                 this.setState({ \r\n//                     loading: false,\r\n//                     error: error.errorMessage,\r\n//                 });\r\n//             })\r\n//     }\r\nrender() {\r\n    return(\r\n        <h1>new page with forecast</h1>\r\n//         const { loading, error, currency } = this.state;\r\n        \r\n//         //render onley loading component if loading state is set to true\r\n//         if (loading) {\r\n//             return <div className=\"loading-container\"><Loading/></div>\r\n//         } \r\n//         //rebder onley error message, if error occured while fething data\r\n//         if (error) {\r\n//             return <div className=\"error\">{error}</div>\r\n//         }\r\n\r\n//         return (\r\n//             <div className=\"Detail\">\r\n//                 <h1 className=\"Detail-heading\">\r\n//                     {currency.name} ({currency.symbol})\r\n//                 </h1>            \r\n//                 <div className=\"Detail-container\">\r\n//                     <div className=\"Detail-item\">\r\n//                         Price <span className=\"Detail-value\">$ {currency.price}</span>\r\n//                     </div>\r\n//                     <div className=\"Detail-item\">\r\n//                         Rank <span className=\"Detail-value\">$ {currency.rank}</span>\r\n//                     </div>\r\n//                     <div className=\"Detail-item\">\r\n//                         24H change <span className=\"Detail-value\">$ {renderChangePercent(currency.percentChange24h)}</span>\r\n//                     </div>\r\n//                     <div className=\"Detail-item\">\r\n//                         <span className=\"Detail-title\">Market cap</span>\r\n//                         <span className=\"Detail-dollar\">$</span>\r\n//                         {currency.marketCap}\r\n//                     </div>\r\n//                     <div className=\"Detail-item\">\r\n//                         <span className=\"Detail-title\">24h volume</span>\r\n//                         <span className=\"Detail-dollar\">$</span>\r\n//                         {currency.volume24h}\r\n//                     </div>\r\n//                     <div className=\"Detail-item\">\r\n//                         <span className=\"Detail-title\">Total supply</span>\r\n//                         {currency.totalSupply}\r\n//                     </div>\r\n//                 </div>\r\n//             </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Detail;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport Search from './components/Search';\nimport NotFound from './components/notFound/NotFound';\nimport Detail from './components/detail/Detail';\nimport './index.css';\n\nclass App extends React.Component {\n  render() {\n    return (\n        <HashRouter basename='/'>\n            <div className=\"mainWrapper\">\n                <Switch>\n                    <Route path='/' component={Search} exact/>\n                    <Route path='/day/:id' component={Detail} exact/>\n                    <Route component={NotFound}/>\n                </Switch>\n            </div>\n        </HashRouter>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}